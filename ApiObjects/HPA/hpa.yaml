apiVersion: apps/v1
kind: Deployment
metadata:
  name: php-apache
spec:
  selector:
    matchLabels:
      run: php-apache
  replicas: 1
  template:
    metadata:
      labels:
        run: php-apache
    spec:
      containers:
      - name: php-apache
        image: k8s.gcr.io/hpa-example
        ports:
        - containerPort: 80
        resources:
          requests:
            # it is 500m for each created pod, it is not a sum of all pods!
            # https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/#cpu-units
            cpu: 500m
          limits:
            # if the pod goes about 1000m then K8s will kill this pod!
            cpu: 1000m

---

apiVersion: v1
kind: Service
metadata:
  name: php-apache
  labels:
    run: php-apache
spec:
  ports:
  - port: 80
  selector:
    run: php-apache

---

apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: php-apache
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps.v1
    kind: Deployment
    name: php-apache
  minReplicas: 1
  maxReplicas: 10
  # a new pod will be created if pod CPU exceeds 250m (it is calculated from requests.CPU and not limits.CPU)
  # https://medium.com/@kennethtcp/auto-scaling-in-kubernetes-for-more-cpu-resources-by-hpa-and-ca-8b8db4f75654
  # This parameter represents the average CPU utilization across all pods in a deployment, expressed as a percentage of the requested CPU of each pod.
  # I have 3 PHP-servers which are consuming 150, 200, 100 millicore respectively, and my requested CPU resources for this deployment is set to 300
  # then the usage is (150+200+100) / (300x3) = 50% and this value is compared with targetCPUUtilizationPercentage
  targetCPUUtilizationPercentage: 50